<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
       	http://www.springframework.org/schema/aop   
       	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
		
	<context:property-placeholder location="classpath:admin.properties" /> 
	
	<context:component-scan base-package="com.imzhitu.admin,com.hts.web" />

    <context:annotation-config />
    
    <tx:annotation-driven transaction-manager="springTransactionManager"/>
    
	
	<bean id="webDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"  
        init-method="init" destroy-method="close" autowire="byName">   
        <description>web mysql xa datasource</description>   
        <property name="uniqueResourceName">   
            <value>web_ds</value>   
        </property>   
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />   
        <property name="xaProperties">   
            <props>   
                <prop key="user">${database.user}</prop>   
                <prop key="password">${database.password}</prop>   
                <prop key="URL">${database.jdbcUrl}</prop>   
            </props>   
        </property>   
        <property name="maxPoolSize" value="${database.maxPoolSize}"/> 
        <property name="minPoolSize" value="${database.minPoolSize}"/>
        <property name="maxIdleTime" value="${database.maxIdleTime}"></property>
        
    </bean>   

	<bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"  
        init-method="init" destroy-method="close" autowire="byName">   
        <description>admin mysql xa datasource</description>   
        <property name="uniqueResourceName">   
            <value>admin_ds</value>   
        </property>   
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />   
        <property name="xaProperties">   
            <props>   
                <prop key="user">${admin.database.user}</prop>   
                <prop key="password">${admin.database.password}</prop>   
                <prop key="URL">${admin.database.jdbcUrl}</prop>   
            </props>   
        </property>   
        <property name="maxPoolSize" value="${database.maxPoolSize}"/> 
        <property name="minPoolSize" value="${database.minPoolSize}"/>
        <property name="maxIdleTime" value="${database.maxIdleTime}"></property>
    </bean>
	
	<bean id="atomikosTransactionManager" 
		class="com.atomikos.icatch.jta.UserTransactionManager" 
		init-method="init" 
		destroy-method="close">
        <property name="forceShutdown" value="true" />   
    </bean>
       
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">   
        <property name="transactionTimeout" value="300"/> 
    </bean>
    
    <bean id="springTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">   
        <property name="transactionManager">
            <ref bean="atomikosTransactionManager"/>
        </property>
        <property name="userTransaction">
            <ref bean="atomikosUserTransaction"/>
        </property>
    </bean>
    
    <tx:advice id="txAdvice" transaction-manager="springTransactionManager">  
     	<tx:attributes>  
     		<tx:method name="commit*" propagation="NEVER"  rollback-for="Exception" />  
         	<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"  />   
         	<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"  />  
         	<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"  />  
         	<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"  />  
         	<tx:method name="cancel*" propagation="REQUIRED" rollback-for="Exception" />
         	<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"  />
         	<tx:method name="register*" propagation="REQUIRED" rollback-for="Exception"  />
         	<tx:method name="*" propagation="SUPPORTS" timeout="20" /> 
         	
     	</tx:attributes>  
 	</tx:advice> 
 	
    <!-- 配置参与事务的类 -->
	<aop:config>
		<aop:advisor 
			pointcut="execution(* com.imzhitu.admin.*.service.*(..))
				or execution(* com.imzhitu.admin.*.dao.*(..))
				or execution(* com.imzhitu.admin.*.mapper.*(..))"
			advice-ref="txAdvice" />
		
		<!-- 
		<aop:aspect ref="operationLogger">
			<aop:around
				pointcut="execution(* com.imzhitu.admin.*.service.*.commit*(..))
					or execution(* com.imzhitu.admin.*.service.*.save*(..))
					or execution(* com.imzhitu.admin.*.service.*.update*(..))
					or execution(* com.imzhitu.admin.*.service.*.delete*(..))
					or execution(* com.imzhitu.admin.*.service.*.cancle*(..))
					or execution(* com.imzhitu.admin.*.service.*.add*(..))"
				method="saveUserOperationLog"  />
		</aop:aspect>
		 -->
	</aop:config>
	
	<bean id="jdbcTemplate" class="com.hts.web.base.database.ZTJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<bean id="jedisConnFactory" 
	    class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" 
	    p:host-name="${redis.ip}" 
	    p:port="${redis.port}"
	    p:password="${redis.password}"
	    p:use-pool="true"/>
	
	<bean id="redisTemplate" 
	    class="org.springframework.data.redis.core.RedisTemplate" 
	    p:connection-factory-ref="jedisConnFactory">
		<property name="keySerializer">  
        	<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>  
	    </property>  
	</bean>
	
	<bean id="webSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" autowire="byName">
        <property name="configLocation" value="classpath:mybatis-config-web.xml" />
        <property name="dataSource" ref="webDataSource" />
    </bean>
 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" autowire="byName">
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.imzhitu.admin.**.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> 
    </bean>
    
    <bean id="webMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
  		<property name="basePackage" value="com.hts.web.**.mapper" /> 
  		<property name="sqlSessionFactoryBeanName" value="webSqlSessionFactory" /> 
  	</bean>
    
    <import resource="spring-config-web.xml" />
    <import resource="spring-config-interact.xml"/>
    
</beans>